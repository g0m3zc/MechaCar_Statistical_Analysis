# Part I
students <- c(Abraham, Beatrice, Cory, Dinah, Eric, Felicia)
# Part I
students <- c(Abraham, Beatrice, Cory, Dinah, Eric, Felicia)
# Part I
students <- c("Abraham", "Beatrice", "Cory", "Dinah", "Eric", "Felicia")
roll_call <- function(class){
print(Sys.Date())
# Create a for loop
}
# Part I
students <- c("Abraham", "Beatrice", "Cory", "Dinah", "Eric", "Felicia")
roll_call <- function(class){
print(Sys.Date())
# Create a for loop
for(student in students){
print(student)
}
}
# Part I
students <- c("Abraham", "Beatrice", "Cory", "Dinah", "Eric", "Felicia")
roll_call <- function(class){
print(Sys.Date())
# Create a for loop
for(person in students){
print(person)
}
}
for(person in students){
print(person)
}
# Part I
students <- c("Abraham", "Beatrice", "Cory", "Dinah", "Eric", "Felicia")
roll_call <- function(class){
print(Sys.Date())
# Create a for loop
for(person in students){
print(person)
}
}
# Call the function with the student vector as an argument.
roll_call(student)
sample(33,3)
# Part II
locker_combinations <- function(class){
# Create the for loop and print the student name and locker combination.
for (person in students) {
print (sample(33,3))
}
}
# Call the function with the student vector as an argument.
locker_combinations(class)
# Part II
locker_combinations <- function(class){
# Create the for loop and print the student name and locker combination.
for (person in students) {
roll_call
print (sample(33,3))
}
}
# Call the function with the student vector as an argument.
locker_combinations(class)
# Part II
locker_combinations <- function(class){
# Create the for loop and print the student name and locker combination.
for (person in students) {
roll_call
print (sample(33,3))
}
}
# Call the function with the student vector as an argument.
locker_combinations(class)
# Part II
locker_combinations <- function(class){
# Create the for loop and print the student name and locker combination.
for (person in students) {
print(student)
print (sample(33,3))
}
}
# Call the function with the student vector as an argument.
locker_combinations(class)
# Part I
students <- c("Abraham", "Beatrice", "Cory", "Dinah", "Eric", "Felicia")
# Part II
locker_combinations <- function(class){
# Create the for loop and print the student name and locker combination.
for (person in students) {
print(student)
print (sample(33,3))
}
}
# Call the function with the student vector as an argument.
locker_combinations(class)
# Part II
locker_combinations <- function(class){
# Create the for loop and print the student name and locker combination.
for (person in class) {
print(student)
print (sample(33,3))
}
}
# Call the function with the student vector as an argument.
locker_combinations(class)
# Part II
locker_combinations <- function(class){
# Create the for loop and print the student name and locker combination.
for (person in class) {
print (sample(33,3))
}
}
# Call the function with the student vector as an argument.
locker_combinations(class)
# Part II
locker_combinations <- function(class){
# Create the for loop and print the student name and locker combination.
for (person in students) {
print (person, sample(33,3))
}
}
# Call the function with the student vector as an argument.
locker_combinations(class)
# Part II
locker_combinations <- function(class){
# Create the for loop and print the student name and locker combination.
for (person in students) {
print (person)
print(sample(33,3))
}
}
# Call the function with the student vector as an argument.
locker_combinations(class)
for (student in students){
# Create a variable (substring)  that holds the second letter for each student.
if(character(1)="e") {
library(readr)
sardines <- read_csv("Class/In_class/15-2-Student_Resources/03-Stu_Sardines/Resources/sardines.csv")
View(sardines)
setwd("~/Class/R_Analysis/MechaCar_Statistical_Analysis")
#Use the library() function to load the dplyr package.
library(dplr)
#Use the library() function to load the dplyr package.
library(dplyr)
#Import and read in the MechaCar_mpg.csv file as a dataframe.
mechaCar_df <- read.csv("MechaCar_mpg.csv")
View(mechaCar_df)
View(mechaCar_df)
View(mechaCar_df)
View(mechaCar_df)
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle +
ground_clearence + AWD,  data=mechaCar_df)
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle +
ground_clearance + AWD,  data=mechaCar_df)
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle +
ground_clearance + AWD,  data=mechaCar_df))
#Use the library() function to load the dplyr package.
library(dplyr)
#Import and read in the MechaCar_mpg.csv file as a dataframe.
mechaCar_df <- read.csv("MechaCar_mpg.csv")
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle +
ground_clearance + AWD,  data=mechaCar_df)
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle +
ground_clearance + AWD,  data=mechaCar_df)
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle +
ground_clearance + AWD,  data=mechaCar_df))
#Import and read in the Suspension_Coil.csv file as a table.
suspend_coil_df <- read.csv("Suspension_Coil.csv")
#Write an RScript that creates a total_summary dataframe using the
#summarize() function to get the mean, median, variance,
#and standard deviation of the suspension coil’s PSI column.
library(tidyverse)
summarize_suspend_coil_df <- suspend_coil_df %>% group_by(condition) %>% summarise(Mean_PSI=mean(PSI), .groups = "keep")
#and standard deviation of the suspension coil’s PSI column.
library(tidyverse)
summarize_suspend_coil_df <- suspend_coil_df %>% summarise(Mean_PSI=mean(PSI), .groups = "keep")
#and standard deviation of the suspension coil’s PSI column.
library(tidyverse)
summarize_suspend_coil_df <- suspend_coil_df %>% summarise(Mean_PSI=mean(PSI), .groups = "keep")
summarize_suspend_coil_df <- suspend_coil_df %>% summarise(Mean=mean(PSI), Median=median(PSI) , .groups = NULL)
View(summarize_suspend_coil_df)
View(summarize_suspend_coil_df)
summarize_suspend_coil_df <- suspend_coil_df %>% summarise(Mean=mean(PSI), Median=median(PSI), Variance=var(PSI) , SD=sd(PSI) , .groups = NULL)
View(summarize_suspend_coil_df)
View(summarize_suspend_coil_df)
lot_summarize_suspend_coil_df <- suspend_coil_df %>% group_by(Manufacturing_Lot) %>% summarise(Mean=mean(PSI), Median=median(PSI), Variance=var(PSI) , SD=sd(PSI) , .groups = "Keep")
lot_summarize_suspend_coil_df <- suspend_coil_df %>% group_by(Manufacturing_Lot) %>% summarise(Mean=mean(PSI), Median=median(PSI), Variance=var(PSI) , SD=sd(PSI) , .groups = "keep")
View(lot_summarize_suspend_coil_df)
View(lot_summarize_suspend_coil_df)
View(summarize_suspend_coil_df)
t.test(summarize_suspend_coil_df$Mean, mu=1500)
t.test(suspend_coil_df$PSI, mu=1500)
t.test(suspend_coil_df$PSI %>% subset = suspend_coil_df$PSI =="Lot1", mu=1500)
t.test(suspend_coil_df$PSI %>% subset(suspend_coil_df, PSI =="Lot1"), mu=1500)
t.test(suspend_coil_df$PSI, subset(suspend_coil_df, PSI =="Lot1"), mu=1500)
t.test(suspend_coil_df$PSI %>% subset(suspend_coil_df, PSI =="Lot1"), mu=1500)
lot1 = subset(suspend_coil_df, PSI =="Lot1")
View(lot1)
#mean of 1,500 pounds per square inch.
lot1 = subset(suspend_coil_df, Manufacturing_Lot =="Lot1")
t.test(suspend_coil_df$PSI %>% subset(suspend_coil_df, Manufacturing_Lot =="Lot1"), mu=1500)
t.test(suspend_coil_df$PSI %>% subset(Manufacturing_Lot =="Lot1"), mu=1500)
t.test(suspend_coil_df$PSI, subset(Manufacturing_Lot =="Lot1"), mu=1500)
t.test(lot1$PSI, mu=1500)
lot2 = subset(suspend_coil_df, Manufacturing_Lot =="Lot2")
t.test(lot2$PSI, mu=1500)
lot2 = subset(suspend_coil_df, Manufacturing_Lot =="Lot3")
t.test(lot3$PSI, mu=1500)
lot2 = subset(suspend_coil_df, Manufacturing_Lot =="Lot2")
t.test(lot2$PSI, mu=1500)
lot3 = subset(suspend_coil_df, Manufacturing_Lot =="Lot3")
t.test(lot3$PSI, mu=1500)
lot1 = subset(suspend_coil_df, Manufacturing_Lot =="Lot1")
t.test(lot1$PSI, mu=1500)
lot2 = subset(suspend_coil_df, Manufacturing_Lot =="Lot2")
t.test(lot2$PSI, mu=1500)
lot3 = subset(suspend_coil_df, Manufacturing_Lot =="Lot3")
t.test(lot3$PSI, mu=1500)
t.test(suspend_coil_df$PSI, mu=1500)
lot1 = subset(suspend_coil_df, Manufacturing_Lot =="Lot1")
t.test(lot1$PSI, mu=1500)
